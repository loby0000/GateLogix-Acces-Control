#!/usr/bin/env node
// backend/src/scripts/setup-optimization.js

/**
 * Script de configuraci√≥n autom√°tica para optimizar GateLogix
 * Ejecutar despu√©s del deployment para configurar √≠ndices y optimizaciones
 */

const mongoose = require('mongoose');
const { createOptimizedIndexes, analyzeQueryPerformance } = require('../config/database-indexes');
require('dotenv').config();

const setupOptimization = async () => {
  try {
    console.log('üöÄ Iniciando configuraci√≥n de optimizaci√≥n para 200K usuarios...');
    console.log('=' .repeat(60));
    
    // Conectar a MongoDB
    console.log('üì° Conectando a MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/gatelogix', {
      maxPoolSize: 50, // Aumentar pool de conexiones
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000
    });
    console.log('‚úÖ Conectado a MongoDB');
    
    // Crear √≠ndices optimizados
    console.log('\nüîß Creando √≠ndices optimizados...');
    await createOptimizedIndexes();
    
    // Analizar rendimiento
    console.log('\nüìä Analizando rendimiento de consultas...');
    await analyzeQueryPerformance();
    
    // Configurar opciones de MongoDB
    console.log('\n‚öôÔ∏è Configurando opciones de MongoDB...');
    const db = mongoose.connection.db;
    
    // Intentar configurar profiler (puede fallar en MongoDB Atlas)
    try {
      await db.command({
        profile: 2,
        slowms: 100,
        sampleRate: 0.1
      });
      console.log('‚úÖ Profiler configurado para consultas >100ms');
    } catch (err) {
      console.log('‚ÑπÔ∏è Profiler no disponible (normal en MongoDB Atlas)');
    }
    
    // Estad√≠sticas de colecciones
    console.log('\nüìà Estad√≠sticas de colecciones:');
    const collections = ['usuarioequipos', 'historials', 'guardias', 'logs'];
    
    for (const collName of collections) {
      try {
        const stats = await db.collection(collName).stats();
        console.log(`üìã ${collName}:`);
        console.log(`   - Documentos: ${stats.count.toLocaleString()}`);
        console.log(`   - Tama√±o: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);
        console.log(`   - √çndices: ${stats.nindexes}`);
        console.log(`   - Tama√±o √≠ndices: ${(stats.totalIndexSize / 1024 / 1024).toFixed(2)} MB`);
      } catch (err) {
        console.log(`üìã ${collName}: Colecci√≥n vac√≠a o no existe`);
      }
    }
    
    // Recomendaciones de configuraci√≥n
    console.log('\nüí° Recomendaciones de configuraci√≥n:');
    console.log('=' .repeat(60));
    
    console.log('üîß Variables de entorno recomendadas:');
    console.log('   NODE_ENV=production');
    console.log('   MONGODB_URI=mongodb://localhost:27017/gatelogix');
    console.log('   JWT_SECRET=<tu-secret-seguro>');
    console.log('   PORT=3000');
    
    console.log('\nüöÄ Configuraci√≥n de servidor recomendada:');
    console.log('   - CPU: 8 cores m√≠nimo');
    console.log('   - RAM: 16GB m√≠nimo');
    console.log('   - Storage: SSD NVMe');
    console.log('   - Network: 1Gbps');
    
    console.log('\nüìä M√©tricas a monitorear:');
    console.log('   - Response time < 200ms (95th percentile)');
    console.log('   - Error rate < 0.1%');
    console.log('   - CPU usage < 70%');
    console.log('   - Memory usage < 80%');
    console.log('   - DB connections < 40/50');
    
    console.log('\nüéØ Pr√≥ximos pasos:');
    console.log('   1. Implementar middleware de cach√© en rutas cr√≠ticas');
    console.log('   2. Configurar compresi√≥n de im√°genes');
    console.log('   3. Implementar rate limiting');
    console.log('   4. Configurar monitoring (PM2, New Relic, etc.)');
    console.log('   5. Setup load balancer para m√∫ltiples instancias');
    
    console.log('\n‚úÖ Configuraci√≥n de optimizaci√≥n completada!');
    console.log('üöÄ El sistema est√° listo para soportar 200K usuarios mensuales');
    
  } catch (error) {
    console.error('‚ùå Error durante la configuraci√≥n:', error);
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log('\nüì° Desconectado de MongoDB');
    process.exit(0);
  }
};

// Funci√≥n para verificar el estado del sistema
const checkSystemHealth = async () => {
  try {
    console.log('üè• Verificando salud del sistema...');
    
    // Conectar a MongoDB
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/gatelogix', {
      maxPoolSize: 50,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000
    });
    
    const db = mongoose.connection.db;
    
    // Verificar conexi√≥n
    const adminDb = db.admin();
    const serverStatus = await adminDb.serverStatus();
    
    console.log('üìä Estado del servidor MongoDB:');
    console.log(`   - Versi√≥n: ${serverStatus.version}`);
    console.log(`   - Uptime: ${Math.floor(serverStatus.uptime / 3600)} horas`);
    console.log(`   - Conexiones: ${serverStatus.connections.current}/${serverStatus.connections.available}`);
    console.log(`   - Memoria: ${(serverStatus.mem.resident)} MB`);
    
    // Verificar √≠ndices cr√≠ticos
    const collections = ['usuarioequipos', 'historials'];
    let allIndexesOk = true;
    
    for (const collName of collections) {
      const indexes = await db.collection(collName).indexes();
      const hasOptimizedIndexes = indexes.some(idx => idx.name.startsWith('idx_'));
      
      if (!hasOptimizedIndexes) {
        console.log(`‚ö†Ô∏è ${collName}: Faltan √≠ndices optimizados`);
        allIndexesOk = false;
      } else {
        console.log(`‚úÖ ${collName}: √çndices optimizados presentes`);
      }
    }
    
    if (allIndexesOk) {
      console.log('‚úÖ Todos los √≠ndices optimizados est√°n presentes');
    } else {
      console.log('‚ö†Ô∏è Ejecutar: npm run setup-optimization');
    }
    
    // Test de rendimiento r√°pido
    console.log('\n‚ö° Test de rendimiento r√°pido...');
    await analyzeQueryPerformance();
    
    console.log('\n‚úÖ Verificaci√≥n de salud completada');
    
  } catch (error) {
    console.error('‚ùå Error verificando salud del sistema:', error);
  } finally {
    await mongoose.disconnect();
  }
};

// Ejecutar seg√∫n el argumento
const command = process.argv[2];

switch (command) {
  case 'setup':
    setupOptimization();
    break;
  case 'health':
    checkSystemHealth();
    break;
  default:
    console.log('üöÄ GateLogix Optimization Setup');
    console.log('\nComandos disponibles:');
    console.log('  node setup-optimization.js setup  - Configurar optimizaciones');
    console.log('  node setup-optimization.js health - Verificar salud del sistema');
    console.log('\nEjemplo:');
    console.log('  npm run setup-optimization');
    console.log('  npm run health-check');
    break;
}
version: '3.8'

services:
  # ================================
  # SERVICIO BACKEND
  # ================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gatelogix-backend
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongo:27017/gatelogix}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
    depends_on:
      - mongo
      - redis
    networks:
      - gatelogix-network
    restart: unless-stopped
    volumes:
      - backend-barcodes:/app/src/barcodes
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # SERVICIO FRONTEND
  # ================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gatelogix-frontend
    ports:
      - "80:8080"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://backend:8080
    depends_on:
      - backend
    networks:
      - gatelogix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # BASE DE DATOS MONGODB
  # ================================
  mongo:
    image: mongo:7.0
    container_name: gatelogix-mongo
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=gatelogix
    volumes:
      - mongo-data:/data/db
      - ./backend/scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - gatelogix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # CACHE REDIS
  # ================================
  redis:
    image: redis:7.2-alpine
    container_name: gatelogix-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-password}
    volumes:
      - redis-data:/data
    networks:
      - gatelogix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # NGINX REVERSE PROXY (OPCIONAL)
  # ================================
  nginx:
    image: nginx:alpine
    container_name: gatelogix-proxy
    ports:
      - "443:443"
      - "8443:8443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - gatelogix-network
    restart: unless-stopped
    profiles:
      - production

# ================================
# VOLÃšMENES PERSISTENTES
# ================================
volumes:
  mongo-data:
    driver: local
  redis-data:
    driver: local
  backend-barcodes:
    driver: local

# ================================
# RED INTERNA
# ================================
networks:
  gatelogix-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16